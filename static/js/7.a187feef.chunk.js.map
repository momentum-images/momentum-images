{"version":3,"sources":["contact.js"],"names":["check","Validator","messages","email","stringEmpty","emailEmpty","string","compile","type","empty","name","message","useState","errors","disabled","loading","form","setState","validate","value","key","newErrors","validation","forEach","field","Object","keys","length","history","useHistory","submit","a","fetch","method","mode","headers","accept","body","JSON","stringify","ok","push","console","log","className","onSubmit","evt","preventDefault","htmlFor","id","placeholder","onChange","target"],"mappings":"2MAYMA,EARI,IAAIC,IAAU,CACtBC,SAAU,CACRC,MAAO,kBACPC,YAAa,kBACbC,WAAY,kBACZC,OAAQ,qBAGIC,QAAQ,CACtBJ,MAAO,CACLK,KAAM,QACNC,OAAO,GAETC,KAAM,CAAEF,KAAM,SAAUC,OAAO,GAC/BE,QAAS,CAAEH,KAAM,SAAUC,OAAO,KAGrB,qBAAO,IAAD,EAC4BG,mBAAS,CACtDC,OAAQ,GACRC,UAAU,EACVC,SAAS,EACTC,KAAM,KALW,0BACVH,EADU,EACVA,OAAQC,EADE,EACFA,SAAUE,EADR,EACQA,KAAQC,EADhB,KAQbC,EAAW,SAACC,GAAuB,IAAhBC,EAAe,uDAAT,KACjB,OAARA,IAAcJ,EAAKI,GAAOD,GAC9B,IAAME,EAAY,GACZC,EAAatB,EAAMgB,GAQzB,OAPmB,IAAfM,GAAqBA,EAAWC,SAAQ,YAAyB,IAAtBZ,EAAqB,EAArBA,QAASa,EAAY,EAAZA,MAAcH,EAAUG,GAASb,KACzFM,EAAS,CACPJ,OAAQQ,EACRP,SAAUW,OAAOC,KAAKL,GAAWM,OAAS,EAC1CZ,SAAS,EACTC,UAEoB,IAAfM,GAGHM,EAAUC,cAEVC,EAAM,uCAAG,sBAAAC,EAAA,6DACbd,EAAS,CACPH,UAAU,EACVC,SAAS,IAHE,kBAMOiB,MAAM,kCAAmC,CACzDC,OAAQ,OACRC,KAAM,OACNC,QAAS,CACPC,OAAQ,oBAEVC,KAAMC,KAAKC,UAAUvB,KAZZ,cAcHwB,IAAIZ,EAAQa,KAAR,uBAA6BzB,EAAKN,OAdnC,gDAgBXgC,QAAQC,IAAR,MAhBW,yDAAH,qDAoBZ,OACE,uBACEC,UAAU,kBACVC,SAAU,SAACC,GACTA,EAAIC,iBACU7B,KACHY,KALf,UAQE,oBAAIc,UAAU,QAAd,qCACA,sBAAKA,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQI,QAAQ,OAAjC,kBACA,sBAAKJ,UAAU,UAAf,UACE,uBACElC,KAAK,OACLuC,GAAG,OACHL,UAAU,QACVpC,KAAK,OACL0C,YAAY,OACZC,SAAU,SAACL,GAAU5B,EAAS4B,EAAIM,OAAOjC,MAAO,WAEjD,SAAWH,GAAQ,KAAO,SAAUH,GAAU,mBAAG+B,UAAU,kCAAb,SAAgD/B,EAAOH,aAG1G,sBAAKkC,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQI,QAAQ,QAAjC,mBACA,sBAAKJ,UAAU,UAAf,UACE,uBACEA,UAAU,QACVpC,KAAK,OACL0C,YAAY,QACZxC,KAAK,QACLuC,GAAG,QACHE,SAAU,SAACL,GAAU5B,EAAS4B,EAAIM,OAAOjC,MAAO,YAEjD,UAAYH,GAAQ,KAAO,UAAWH,GAAU,mBAAG+B,UAAU,kCAAb,SAAgD/B,EAAOV,cAG5G,sBAAKyC,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQI,QAAQ,UAAjC,qBACA,sBAAKJ,UAAU,UAAf,UACE,0BACElC,KAAK,UACLuC,GAAG,UACHL,UAAU,WACVM,YAAY,WACZC,SAAU,SAACL,GAAU5B,EAAS4B,EAAIM,OAAOjC,MAAO,cAEjD,YAAcH,GAAQ,KAAO,YAAaH,GAAU,mBAAG+B,UAAU,kCAAb,SAAgD/B,EAAOF,gBAGhH,uBAAOH,KAAK,SAASE,KAAK,WAAWS,MAAM,4BAC3C,qBAAKyB,UAAU,QAAf,SACE,sBAAKA,UAAU,UAAf,UACE,uBACE9B,SAAUA,EACVN,KAAK,SACLoC,UAAU,0BACVzB,MAAM,WAE8B,IAArCM,OAAOC,KAAMV,GAAQ,IAAKW,QAAgB,mBAAGiB,UAAU,mCAAb","file":"static/js/7.a187feef.chunk.js","sourcesContent":["import Validator from 'fastest-validator'\nimport React, { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nconst v = new Validator({\n  messages: {\n    email: 'Invalid {field}',\n    stringEmpty: 'Missing {field}',\n    emailEmpty: 'Missing {field}',\n    string: 'Missing {field}'\n  }\n})\nconst check = v.compile({\n  email: {\n    type: 'email',\n    empty: false\n  },\n  name: { type: 'string', empty: false },\n  message: { type: 'string', empty: false }\n})\n\nexport default () => {\n  const [{ errors, disabled, form }, setState] = useState({\n    errors: {},\n    disabled: true,\n    loading: false,\n    form: {}\n  })\n\n  const validate = (value, key = null) => {\n    if (key !== null) form[key] = value\n    const newErrors = {}\n    const validation = check(form)\n    if (validation !== true) validation.forEach(({ message, field }) => { newErrors[field] = message })\n    setState({\n      errors: newErrors,\n      disabled: Object.keys(newErrors).length > 0,\n      loading: false,\n      form\n    })\n    return validation === true\n  }\n\n  const history = useHistory()\n\n  const submit = async () => {\n    setState({\n      disabled: true,\n      loading: true\n    })\n    try {\n      const res = await fetch('https://formspree.io/f/xknpjdwz', {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          accept: 'application/json'\n        },\n        body: JSON.stringify(form)\n      })\n      if (res.ok) history.push(`/thanks?name=${form.name}`)\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  return (\n    <form\n      className='contact is-lato'\n      onSubmit={(evt) => {\n        evt.preventDefault()\n        const valid = validate()\n        if (valid) submit()\n      }}\n    >\n      <h1 className='title'>Contact Momentum Images</h1>\n      <div className='field'>\n        <label className='label' htmlFor='name'>Name</label>\n        <div className='control'>\n          <input\n            name='name'\n            id='name'\n            className='input'\n            type='text'\n            placeholder='Name'\n            onChange={(evt) => { validate(evt.target.value, 'name') }}\n          />\n          {'name' in (form || {}) && 'name' in errors && <p className='contact-message has-text-danger'>{errors.name}</p>}\n        </div>\n      </div>\n      <div className='field'>\n        <label className='label' htmlFor='email'>Email</label>\n        <div className='control'>\n          <input\n            className='input'\n            type='text'\n            placeholder='Email'\n            name='email'\n            id='email'\n            onChange={(evt) => { validate(evt.target.value, 'email') }}\n          />\n          {'email' in (form || {}) && 'email' in errors && <p className='contact-message has-text-danger'>{errors.email}</p>}\n        </div>\n      </div>\n      <div className='field'>\n        <label className='label' htmlFor='message'>Message</label>\n        <div className='control'>\n          <textarea\n            name='message'\n            id='message'\n            className='textarea'\n            placeholder='Textarea'\n            onChange={(evt) => { validate(evt.target.value, 'message') }}\n          />\n          {'message' in (form || {}) && 'message' in errors && <p className='contact-message has-text-danger'>{errors.message}</p>}\n        </div>\n      </div>\n      <input type='hidden' name='_subject' value='Contact Form Submission' />\n      <div className='field'>\n        <div className='control'>\n          <input\n            disabled={disabled}\n            type='submit'\n            className='button is-dark is-large'\n            value='Submit'\n          />\n          {Object.keys((form || {})).length === 0 && <p className='contact-message has-text-primary'>All fields are required</p>}\n        </div>\n      </div>\n    </form>\n  )\n}\n"],"sourceRoot":""}